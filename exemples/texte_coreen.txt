   Link: [1]canonical
   [2]WikiDocs

     • [3]_____________________ [4]검색

   [5]점프 투 파이썬 [6]00장 들어가기 전에 [7]00-1 머리말 [8]00-2 저자소개
   [9]00-3 주요변경이력 [10]00-4 책구입안내 [11]01장 파이썬이란 무엇인가?
   [12]01-1 파이썬이란? [13]01-2 파이썬의 특징 [14]01-3 파이썬으로 무엇을 할
   수 있을까? [15]01-4 파이썬 설치하기 [16]01-5 파이썬 둘러보기 [17]01-6 파이
   썬과 에디터 [18]02장 파이썬 프로그래밍의 기초, 자료형 [19]02-1 숫자형
   [20]02-2 문자열 자료형 [21]02-3 리스트 자료형 [22]02-4 튜플 자료형
   [23]02-5 딕셔너리 자료형 [24]02-6 집합 자료형 [25]02-7 불 자료형 [26]02-8
   자료형의 값을 저장하는 공간, 변수 [27]02장 연습문제 [28]03장 프로그램의 구
   조를 쌓는다! 제어문 [29]03-1 if문 [30]03-2 while문 [31]03-3 for문 [32]03장
   연습문제 [33]04장 프로그램의 입력과 출력은 어떻게 해야 할까? [34]04-1 함수
   [35]04-2 사용자 입력과 출력 [36]04-3 파일 읽고 쓰기 [37]04장 연습문제
   [38]05장 파이썬 날개달기 [39]05-1 클래스 [40]05-2 모듈 [41]05-3 패키지
   [42]05-4 예외 처리 [43]05-5 내장 함수 [44]05-6 외장 함수 [45]05장 연습문제
   [46]06장 파이썬 프로그래밍, 어떻게 시작해야 할까? [47]06-1 내가 프로그램을
   만들 수 있을까? [48]06-2 3과 5의 배수 합하기 [49]06-3 게시판 페이징하기
   [50]06-4 간단한 메모장 만들기 [51]06-5 탭을 4개의 공백으로 바꾸기 [52]06-6
   하위 디렉터리 검색하기 [53]06-7 코딩도장 [54]07장 정규표현식 [55]07-1 정규
   표현식 살펴보기 [56]07-2 정규 표현식 시작하기 [57]07-3 강력한 정규 표현식
   의 세계로 [58]08장 종합문제 [59]09장 풀이
   [60]목차보기

                                 05-5 내장 함수

   지금까지 파이썬으로 프로그래밍하기 위해 알아야 하는 것들을 대부분 공부했
   다. 이제 여러분은 원하는 프로그램을 직접 만들 수 있을 것이다. 하지만 그 전
   에 먼저 여러분이 만들려는 프로그램이 이미 만들어져 있는지 살펴보기 바란다.
   물론 공부를 위해서라면 누군가 만들어 놓은 프로그램을 또 만들 수도 있다. 하
   지만 그런 목적이 아니라면 이미 만들어진 것을 다시 만드는 것은 불필요한 행
   동이다(Don’t Reinvent The Wheel, 이미 있는 것을 다시 만드느라 쓸데없이 시
   간을 낭비하지 말라). 그리고 이미 만들어진 프로그램은 테스트 과정을 수 없이
   거쳤기 때문에 충분히 검증되어 있다. 따라서 무엇인가 새로운 프로그램을 만들
   기 전에는 이미 만들어진 것들, 그중에서도 특히 파이썬 배포본에 함께 들어 있
   는 파이썬 라이브러리를 살펴보는 것이 매우 중요하다.

   라이브러리를 살펴보기 전에 파이썬 내장 함수를 먼저 살펴보자. 우리는 이미
   몇 가지 내장 함수를 배웠다. print, del, type 등이 바로 그것이다. 이러한 파
   이썬 내장 함수는 외부 모듈과 달리 import가 필요하지 않기 때문에 아무런 설
   정 없이 바로 사용할 수 있다.

   이 책에서는 활용 빈도가 높고 중요한 함수를 중심으로 알파벳 순서대로 간략히
   정리했다. 파이썬으로 프로그래밍을 하기 위해 이들 함수를 지금 당장 모두 알
   아야 하는 것은 아니므로 가벼운 마음으로 천천히 살펴보자.

     • [61]abs
     • [62]all
     • [63]any
     • [64]chr
     • [65]dir
     • [66]divmod
     • [67]enumerate
     • [68]eval
     • [69]filter
     • [70]hex
     • [71]id
     • [72]input
     • [73]int
     • [74]isinstance
     • [75]len
     • [76]list
     • [77]map
     • [78]max
     • [79]min
     • [80]oct
     • [81]open
     • [82]ord
     • [83]pow
     • [84]range
     • [85]round
     • [86]sorted
     • [87]str
     • [88]sum
     • [89]tuple
     • [90]type
     • [91]zip

abs

   abs(x)는 어떤 숫자를 입력받았을 때, 그 숫자의 절댓값을 돌려주는 함수이다.

 >>> abs(3)
 3
 >>> abs(-3)
 3
 >>> abs(-1.2)
 1.2

all

   all(x)는 반복 가능한(iterable) 자료형 x를 입력 인수로 받으며 이 x가 모두
   참이면 True, 거짓이 하나라도 있으면 False를 돌려준다.

     ※ 반복 가능한 자료형이란 for문으로 그 값을 출력할 수 있는 것을 의미한다.
     리스트, 튜플, 문자열, 딕셔너리, 집합 등이 있다.

   다음 예를 보자.

 >>> all([1, 2, 3])
 True

   리스트 자료형 [1, 2, 3]은 모든 요소가 참이므로 True를 돌려준다.

 >>> all([1, 2, 3, 0])
 False

   리스트 자료형 [1, 2, 3, 0] 중에서 요소 0은 거짓이므로 False를 돌려준다.

     ※ 자료형의 참과 거짓에 대해 잘 기억나지 않는다면 02-7을 다시 한 번 읽어
     보자.

any

   any(x)는 x 중 하나라도 참이 있으면 True를 돌려주고, x가 모두 거짓일 때에만
   False를 돌려준다. all(x)의 반대이다.

   다음 예를 보자.

 >>> any([1, 2, 3, 0])
 True

   리스트 자료형 [1, 2, 3, 0] 중에서 1, 2, 3이 참이므로 True를 돌려준다.

 >>> any([0, ""])
 False

   리스트 자료형 [0, ""]의 요소 0과 ""은 모두 거짓이므로 False를 돌려준다.

chr

   chr(i)는 아스키(ASCII) 코드 값을 입력받아 그 코드에 해당하는 문자를 출력하
   는 함수이다.

     ※ 아스키 코드란 0에서 127 사이의 숫자를 각각 하나의 문자 또는 기호에 대
     응시켜 놓은 것이다.

 >>> chr(97)
 'a'
 >>> chr(48)
 '0'

dir

   dir은 객체가 자체적으로 가지고 있는 변수나 함수를 보여 준다. 다음 예는 리
   스트와 딕셔너리 객체 관련 함수(메서드)를 보여 주는 예이다. 우리가 02장에서
   살펴본 자료형 관련 함수를 만나 볼 수 있다.

 >>> dir([1, 2, 3])
 ['append', 'count', 'extend', 'index', 'insert', 'pop',...]
 >>> dir({'1':'a'})
 ['clear', 'copy', 'get', 'has_key', 'items', 'keys',...]

divmod

   divmod(a, b)는 2개의 숫자를 입력으로 받는다. 그리고 a를 b로 나눈 몫과 나머
   지를 튜플 형태로 돌려주는 함수이다.

 >>> divmod(7, 3)
 (2, 1)

   몫을 구하는 연산자 //와 나머지를 구하는 연산자 %를 각각 사용한 결과와 비교
   해 보자.

 >>> 7 // 3
 2
 >>> 7 % 3
 1

enumerate

   enumerate는 "열거하다"라는 뜻이다. 이 함수는 순서가 있는 자료형(리스트, 튜
   플, 문자열)을 입력으로 받아 인덱스 값을 포함하는 enumerate 객체를 돌려준
   다.

     ※ 보통 enumerate 함수는 다음 예제처럼 for문과 함께 자주 사용한다.

   잘 이해되지 않으면 다음 예를 보자.

 >>> for i, name in enumerate(['body', 'foo', 'bar']):
 ...     print(i, name)
 ...
 0 body
 1 foo
 2 bar

   순서 값과 함께 body, foo, bar가 순서대로 출력되었다. 즉 위 예제와 같이
   enumerate를 for문과 함께 사용하면 자료형의 현재 순서(index)와 그 값을 쉽게
   알 수 있다.

   for문처럼 반복되는 구간에서 객체가 현재 어느 위치에 있는지 알려 주는 인덱
   스 값이 필요할때 enumerate 함수를 사용하면 매우 유용하다.

eval

   eval(expression )은 실행 가능한 문자열(1+2, 'hi' + 'a' 같은 것)을 입력으로
   받아 문자열을 실행한 결괏값을 돌려주는 함수이다.

 >>> eval('1+2')
 3
 >>> eval("'hi' + 'a'")
 'hia'
 >>> eval('divmod(4, 3)')
 (1, 1)

   보통 eval은 입력받은 문자열로 파이썬 함수나 클래스를 동적으로 실행하고 싶
   을 때 사용한다.

filter

   filter란 무엇인가를 걸러낸다는 뜻으로 filter 함수도 동일한 의미를 가진다.

   filter 함수는 첫 번째 인수로 함수 이름을, 두 번째 인수로 그 함수에 차례로
   들어갈 반복 가능한 자료형을 받는다. 그리고 두 번째 인수인 반복 가능한 자료
   형 요소가 첫 번째 인수인 함수에 입력되었을 때 반환 값이 참인 것만 묶어서(
   걸러 내서) 돌려준다.

   다음 예를 보자.

 #positive.py
 def positive(l):
     result = []
     for i in l:
         if i > 0:
             result.append(i)
     return result

 print(positive([1,-3,2,0,-5,6]))

     결과값: [1, 2, 6]

   즉 위에서 만든 positive 함수는 리스트를 입력값으로 받아 각각의 요소를 판별
   해서 양수 값만 돌려주는 함수이다.

   filter 함수를 사용하면 위 내용을 다음과 같이 간단하게 작성할 수 있다.

 #filter1.py
 def positive(x):
     return x > 0

 print(list(filter(positive, [1, -3, 2, 0, -5, 6])))

     결과값: [1, 2, 6]

   여기에서는 두 번째 인수인 리스트의 요소들이 첫 번째 인수인 positive 함수에
   입력되었을때 반환 값이 참인 것만 묶어서 돌려준다. 앞의 예에서는 1, 2, 6만
   양수여서 x > 0 문장이 참이되므로 [1, 2, 6]이라는 결괏값을 돌려주게 된 것이
   다.

   앞의 함수는 lambda를 사용하면 더욱 간편하게 코드를 작성할 수 있다.

 >>> list(filter(lambda x: x > 0, [1, -3, 2, 0, -5, 6]))
 [1, 2, 6]

hex

   hex(x)는 정수 값을 입력받아 16진수(hexadecimal)로 변환하여 돌려주는 함수이
   다.

 >>> hex(234)
 '0xea'
 >>> hex(3)
 '0x3'

id

   id(object)는 객체를 입력받아 객체의 고유 주소 값(레퍼런스)을 돌려주는 함수
   이다.

 >>> a = 3
 >>> id(3)
 135072304
 >>> id(a)
 135072304
 >>> b = a
 >>> id(b)
 135072304

   위 예의 3, a, b는 고유 주소 값이 모두 135072304이다. 즉 3, a, b가 모두 같
   은 객체를 가리키고 있다.

   만약 id(4)라고 입력하면 4는 3, a, b와 다른 객체이므로 당연히 다른 고유 주
   소 값이 출력된다.

 >>> id(4)
 135072292

input

   input([prompt])은 사용자 입력을 받는 함수이다. 매개변수로 문자열을 주면 다
   음 세 번째 예에서 볼 수 있듯이 그 문자열은 프롬프트가 된다.

     ※ [ ] 기호는 괄호 안의 내용을 생략할 수 있다는 관례 표기법임을 기억하자.

 >>> a = input()
 hi
 >>> a
 'hi'
 >>> b = input("Enter: ")
 Enter: hi

   위에서 입력받은 문자열을 확인해 보면 다음과 같다.

 >>> b
 'hi'

int

   int(x)는 문자열 형태의 숫자나 소수점이 있는 숫자 등을 정수 형태로 돌려주는
   함수로, 정수를 입력으로 받으면 그대로 돌려준다.

 >>> int('3')
 3
 >>> int(3.4)
 3

   int(x, radix)는 radix 진수로 표현된 문자열 x를 10진수로 변환하여 돌려준다.

   2진수로 표현된 11의 10진수 값은 다음과 같이 구한다.

 >>> int('11', 2)
 3

   16진수로 표현된 1A의 10진수 값은 다음과 같이 구한다.

 >>> int('1A', 16)
 26

isinstance

   isinstance(object, class )는 첫 번째 인수로 인스턴스, 두 번째 인수로 클래
   스 이름을 받는다. 입력으로 받은 인스턴스가 그 클래스의 인스턴스인지를 판단
   하여 참이면 True, 거짓이면 False를 돌려준다.

 >>> class Person: pass
 ...
 >>> a = Person()
 >>> isinstance(a, Person)
 True

   위 예는 a가 Person 클래스가 만든 인스턴스임을 확인시켜 준다.

 >>> b = 3
 >>> isinstance(b, Person)
 False

   b는 Person 클래스가 만든 인스턴스가 아니므로 False를 돌려준다.

len

   len(s)은 입력값 s의 길이(요소의 전체 개수)를 돌려주는 함수이다.

 >>> len("python")
 6
 >>> len([1,2,3])
 3
 >>> len((1, 'a'))
 2

list

   list(s)는 반복 가능한 자료형 s를 입력받아 리스트로 만들어 돌려주는 함수이
   다.

 >>> list("python")
 ['p', 'y', 't', 'h', 'o', 'n']
 >>> list((1,2,3))
 [1, 2, 3]

   list 함수에 리스트를 입력으로 주면 똑같은 리스트를 복사하여 돌려준다.

 >>> a = [1, 2, 3]
 >>> b = list(a)
 >>> b
 [1, 2, 3]

map

   map(f, iterable)은 함수(f)와 반복 가능한(iterable) 자료형을 입력으로 받는
   다. map은 입력받은 자료형의 각 요소를 함수 f가 수행한 결과를 묶어서 돌려주
   는 함수이다.

   다음 예를 보자.

 # two_times.py
 def two_times(numberList):
     result = [ ]
     for number in numberList:
         result.append(number*2)
     return result

 result = two_times([1, 2, 3, 4])
 print(result)

   two_times 함수는 리스트 요소를 입력받아 각 요소에 2를 곱한 결괏값을 돌려준
   다. 실행 결과는 다음과 같다.

     결과값: [2, 4, 6, 8]

   위 예제는 map 함수를 사용하면 다음처럼 바꿀 수 있다.

 >>> def two_times(x):
 ...     return x*2
 ...
 >>> list(map(two_times, [1, 2, 3, 4]))
 [2, 4, 6, 8]

   이제 앞 예제를 해석해 보자. 먼저 리스트의 첫 번째 요소인 1이 two_times 함
   수의 입력값으로 들어가고 1 * 2의 과정을 거쳐서 2가 된다. 다음으로 리스트의
   두 번째 요소인 2가 2 * 2 의 과정을 거쳐 4가 된다. 따라서 결괏값 리스트는
   이제 [2, 4]가 된다. 총 4개의 요솟값이 모두 수행되면 마지막으로 [2, 4, 6,
   8]을 돌려준다. 이것이 map 함수가 하는 일이다.

     ※ 위 예에서 map의 결과를 리스트로 보여 주기위해 list 함수를 사용하여 출
     력하였다.

   앞의 예는 lambda를 사용하면 다음처럼 간략하게 만들 수 있다.

 >>> list(map(lambda a: a*2, [1, 2, 3, 4]))
 [2, 4, 6, 8]

max

   max(iterable)는 인수로 반복 가능한 자료형을 입력받아 그 최댓값을 돌려주는
   함수이다.

 >>> max([1, 2, 3])
 3
 >>> max("python")
 'y'

min

   min(iterable)은 max 함수와 반대로, 인수로 반복 가능한 자료형을 입력받아 그
   최솟값을 돌려주는 함수이다.

 >>> min([1, 2, 3])
 1
 >>> min("python")
 'h'

oct

   oct(x)는 정수 형태의 숫자를 8진수 문자열로 바꾸어 돌려주는 함수이다.

 >>> oct(34)
 '0o42'
 >>> oct(12345)
 '0o30071'

open

   open(filename, [mode])은 "파일 이름"과 "읽기 방법"을 입력받아 파일 객체를
   돌려주는 함수이다. 읽기 방법(mode)을 생략하면 기본값인 읽기 전용 모드(r)로
   파일 객체를 만들어 돌려준다.

   mode           설명
   w    쓰기 모드로 파일 열기
   r    읽기 모드로 파일 열기
   a    추가 모드로 파일 열기
   b    바이너리 모드로 파일 열기

   b는 w, r, a와 함께 사용한다.

 >>> f = open("binary_file", "rb")

   위 예의 rb는 "바이너리 읽기 모드"를 의미한다.

   다음 예의 fread와 fread2는 동일한 방법이다.

 >>> fread = open("read_mode.txt", 'r')
 >>> fread2 = open("read_mode.txt")

   즉 모드 부분을 생략하면 기본값으로 읽기 모드 r를 갖게 된다.

   다음은 추가 모드(a)로 파일을 여는 예이다.

 >>> fappend = open("append_mode.txt", 'a')

ord

   ord(c)는 문자의 아스키 코드 값을 돌려주는 함수이다.

     ※ ord 함수는 chr 함수와 반대이다.

 >>> ord('a')
 97
 >>> ord('0')
 48

pow

   pow(x, y)는 x의 y 제곱한 결괏값을 돌려주는 함수이다.

 >>> pow(2, 4)
 16
 >>> pow(3, 3)
 27

range

   range([start,] stop [,step] )는 for문과 함께 자주 사용하는 함수이다. 이 함
   수는 입력받은 숫자에 해당하는 범위 값을 반복 가능한 객체로 만들어 돌려준
   다.

   인수가 하나일 경우

   시작 숫자를 지정해 주지 않으면 range 함수는 0부터 시작한다.

 >>> list(range(5))
 [0, 1, 2, 3, 4]

   인수가 2개일 경우

   입력으로 주어지는 2개의 인수는 시작 숫자와 끝 숫자를 나타낸다. 단 끝 숫자
   는 해당 범위에 포함되지 않는다는 것에 주의하자.

 >>> list(range(5, 10))
 [5, 6, 7, 8, 9]

   인수가 3개일 경우

   세 번째 인수는 숫자 사이의 거리를 말한다.

 >>> list(range(1, 10, 2))
 [1, 3, 5, 7, 9]
 >>> list(range(0, -10, -1))
 [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]

round

   round(number[, ndigits]) 함수는 숫자를 입력받아 반올림해 주는 함수이다.

     ※ [, ndigits]는 ndigits가 있을 수도 있고 없을 수도 있다는 의미이다.

 >>> round(4.6)
 5
 >>> round(4.2)
 4

   다음과 같이 실수 5.678을 소수점 2자리까지만 반올림하여 표시할 수 있다.

 >>> round(5.678, 2)
 5.68

   round 함수의 두 번째 매개변수는 반올림하여 표시하고 싶은 소수점의 자릿
   수(ndigits)이다.

sorted

   sorted(iterable) 함수는 입력값을 정렬한 후 그 결과를 리스트로 돌려주는 함
   수이다.

 >>> sorted([3, 1, 2])
 [1, 2, 3]
 >>> sorted(['a', 'c', 'b'])
 ['a', 'b', 'c']
 >>> sorted("zero")
 ['e', 'o', 'r', 'z']
 >>> sorted((3, 2, 1))
 [1, 2, 3]

   리스트 자료형에도 sort 함수가 있다. 하지만 리스트 자료형의 sort 함수는 리
   스트 객체 그 자체를 정렬만 할 뿐 정렬된 결과를 돌려주지는 않는다.

str

   str(object)은 문자열 형태로 객체를 변환하여 돌려주는 함수이다.

 >>> str(3)
 '3'
 >>> str('hi')
 'hi'
 >>> str('hi'.upper())
 'HI'

sum

   sum(iterable) 은 입력받은 리스트나 튜플의 모든 요소의 합을 돌려주는 함수이
   다.

 >>> sum([1,2,3])
 6
 >>> sum((4,5,6))
 15

tuple

   tuple(iterable)은 반복 가능한 자료형을 입력받아 튜플 형태로 바꾸어 돌려주
   는 함수이다. 만약 튜플이 입력으로 들어오면 그대로 돌려준다.

 >>> tuple("abc")
 ('a', 'b', 'c')
 >>> tuple([1, 2, 3])
 (1, 2, 3)
 >>> tuple((1, 2, 3))
 (1, 2, 3)

type

   type(object)은 입력값의 자료형이 무엇인지 알려 주는 함수이다.

 >>> type("abc")
 <class 'str'>
 >>> type([ ])
 <class 'list'>
 >>> type(open("test", 'w'))
 <class '_io.TextIOWrapper'>

zip

   zip(*iterable)은 동일한 개수로 이루어진 자료형을 묶어 주는 역할을 하는 함
   수이다.

     ※ 여기서 사용한 *iterable은 반복 가능(iterable)한 자료형 여러 개를 입력
     할 수 있다는 의미이다.

   잘 이해되지 않는다면 다음 예제를 살펴보자.

 >>> list(zip([1, 2, 3], [4, 5, 6]))
 [(1, 4), (2, 5), (3, 6)]
 >>> list(zip([1, 2, 3], [4, 5, 6], [7, 8, 9]))
 [(1, 4, 7), (2, 5, 8), (3, 6, 9)]
 >>> list(zip("abc", "def"))
 [('a', 'd'), ('b', 'e'), ('c', 'f')]

   마지막 편집일시 : 2019년 6월 30일 4:35 오후
   [92]댓글 52 [93]피드백
   예제의 들여쓰기가 잘못되었습니다. >>> def sum_mul(choice, *args): . . . if
   choice == "sum": . . . result = 0 . . . for i in args: . . . result =
   result + i . . . elif choice == "mul": . . . result = 1 . . . for i in
   args: . . . result = result * i . . . return result . . . >>> 이 예제에서
   마지막 return 문은 한 줄 들여쓰기를 해야 syntax error가 발생하지 않습니다.
   - 신재훈, 2008년 6월 18일 2:19 오후
   수정했습니다. 감사합니다. ^^ - 박응용, 2008년 6월 18일 2:29 오후
   repr 함수 코드에서 eval문 쓰는 줄끝에 ')' 하나씩 없네요. - 윤종필, 2008년
   7월 9일 3:14 오후
   수정했습니다. 감사합니다. ^^ - 박응용, 2008년 7월 9일 5:59 오후
   복소수의 abs 에서 sqrt 적용하는 부분이 안보입니다. - 파이손, 2008년 8월 8
   일 9:37 오전
   넵, 수정했습니다. 감사합니다 ^^ - 박응용, 2008년 8월 8일 9:41 오전
   함수 파라미터변수명 앞에 말씀하신 *을 붙이는 이유는 문자와 숫자의 차이가
   아닌 입력갯수와 상관이 있습니다. 위 설명을 자세히 보시면 알 수 있으실 겁니
   다. ^^ - 박응용, 2009년 1월 15일 1:24 오후
   아 알겠습니다. 감사합니다. <모르고 지웠네요..> - hscl, 2009년 1월 15일
   1:27 오후
   마지막 결과물 출력에서 현재 숫자는 0, 1 ,2, 3, 4, 5 가 아닐까요 ?? ^^, 0이
   빠진 걸까요? - jwparkinf8, 2009년 9월 25일 10:15 오전
   네, 수정했습니다. 감사합니다. ^^ - 박응용, 2009년 9월 25일 10:23 오전
   파일을 하나 (없으면 생성해서) 열고 내용을 읽고 추가로 쓰기 위해서는 어떻게
   해야 할까요? 간단히 하나의 명령어로 안되나요? - 현수, 2009년 12월 26일
   1:53 오후
   읽은 파일객체와 쓰는 파일객체를 따로 해서 코드를 작성하셔야 합니다. 하나의
   명령어로는 불가능할 듯 합니다. - 박응용, 2009년 12월 28일 9:46 오전
   입력값이 몇 개가 될 지 모를 때는 어떻게 해야 할까? 이 섹션에서 첫번째 코드
   에서 sum = sum + i continue <들어가야하는거아닌가요 ? 예제코드 출력이 1이
   나와서 continue를 넣어보니깐 정상출력이되네요.. . . . return sum 제가 잘못
   안건가요..;; - 파이썬배울래요, 2011년 1월 7일 7:30 오전
   아 들여쓰기 잘못이군요.. sum = sum + i 후에 return sum 을 들여쓰기를 잘해
   줘야하네요.. ㅈㅅ합니당 ! - 파이썬배울래요, 2011년 1월 7일 7:35 오전
   함수는 3장 제어문과 같이 있는 것은 어떨까요... - 무명씨, 2011년 3월 30일
   8:34 오후
   default argument 의 초기화 횟수에 대해서도 싣는 것이 어떻겠습니까? - 무명
   씨, 2011년 4월 13일 6:11 오후
   dir([1,2,3]) ['__add__', '__class__', '__contains__', '__delattr__',
   '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__',
   '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__',
   '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__',
   '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__',
   '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__',
   '__setitem__', '__setslice__', '__sizeof__', '__str__',
   '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop',
   'remove', 'reverse', 'sort'] dir({'1':'a'}) ['__class__', '__cmp__',
   '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__',
   '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__',
   '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__',
   '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',
   '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__',
   'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems',
   'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault',
   'update', 'values', 'viewitems', 'viewkeys', 'viewvalues'] 이렇게 뜨거든
   요... 왜 책은 한줄이 나오는지 궁금하고요 .. 그리고 dir([1,2,3])과
   dir({1:'a'})의 의미는 무엇인가요? - 이훈상, 2011년 5월 23일 9:24 오전
   파이썬 버전에 따라 내장함수에 차이가 있을 수 있습니다. 책에 있는 버전과 지
   금 사용하시는 파이썬 버전이 다르기 때문입니다. dir([])은 리스트의 내장함수
   를 보는 명령어이고 dir({})은 딕셔너리의 내장함수를 보는 명령입니다. - 박응
   용, 2011년 5월 23일 9:42 오전
   reload와 reduce가 3.0에서는 없어진다는데 사실인지요? - reload와 reduce,
   2011년 5월 24일 9:03 오후
   최근 버전 (python 2.7)에서도 import 되는 module이 수정되면 reload가 필요한
   가요? - reload 필요한가요, 2011년 5월 24일 9:04 오후
   복수의 입력인수가 가변적인것이 기존에 공부하던 C/C++ 과 다른점이 있군요 ..
   잘 배우고 갑니다. ^^ - Kim Ju Hwang, 2012년 9월 17일 4:19 오후
   apply는 3.0에서 완전히 사라졌네요. 함수를 직접 호출할 수 있으니 필요나 없
   어졌습니다. - Ryu Changhan, 2012년 12월 18일 4:57 오후
   cmp 도 3.0에서 없어졌네요. 굳이 쓴다라면 def cmp(a,b): return (a>b) -
   (a<b) - Ryu Changhan, 2012년 12월 18일 5:01 오후
   '1A'라는 십육신수 -->> 진수 가 맞는 표현 같습니다. - Lee Moon, 2013년 1월
   26일 12:06 오후
   코드를 보다보면 가끔 **kwargs라는 표현이 보이는데요 ** 이것의 의미가 뭔가
   요? - 레알앵글러, 2013년 4월 25일 10:22 오전
   Python 3.2.3입니다. for문 이후부터는 예제를 진행하기가 어렵습니다. >>> def
   sum(a,b): ... result=a+b ... return result ... >>> a = sum(3,4): File
   "<stdin>", line 1 a = sum(3,4): ^ SyntaxError: invalid syntax >>> -
   starmomo, 2013년 5월 9일 7:57 오후
   a = sum(3,4): 아니라 a = sum(3,4) 라고 입력하셔야..? ":" 사용시에는 빼셔야
   해요 - Lilly, 2014년 2월 28일 3:38 오후
   map 함수 설명의 두번째 예시의 for 문과 그 다음줄의 들여쓰기가 잘못 되어 있
   습니다. - BJ, 2014년 4월 10일 10:02 오전
   @BJ 님, 수정했습니다. 알려주셔서 감사합니다. - 박응용, 2014년 4월 10일
   10:06 오전
   잘 배워갑니다. 참고로 딕셔너리에 대한 dir() 설명에서, 'has_key' 메소드는
   파이썬3 에서 없어졌어요. - 한재흥, 2014년 5월 4일 12:01 오전
   l = [lambda a,b:a+b, lambda a,b:a*b] l [<function __main__.<lambda>>,
   <function __main__.<lambda>>] 오류 내용이 다르게 나옵니다. 바뀐것일지도 모
   르겠네요. - SeHoon, 2014년 6월 21일 1:16 오전
   str과 repr의 차이점은 문자열 그 자체를 리턴하는가(str)와 문자열에
   ""(quotation)을 포함시킨 문자열을 return하는가의 차이인듯 합니다.(정확하진
   않으니 참고만 하시기 바랍니다.) 즉 eval("str('hi')")과 eval(repr('hi'))는
   동일한 문장인듯 합니다.(결과만..) - 손승환, 2014년 7월 22일 11:38 오후
   map 함수 사용 시 >>> a = [1,2,3,4] >>> a = map(lambda x:x*2, a) >>> print
   a [2, 4, 6, 8] 이렇게 굳이 list(map(~)) 해줄 필요가 없는 것 같은데 왜 list
   사용하셨는지 알수 있을까요? - Mini, 2015년 1월 11일 8:47 오후
   @Mini님, map의 결과를 리스트로 바꾼이유는 파이썬 2.7은 map의 결과가 리스트
   이지만 python3 버전은 map객체가 리턴되기 때문입니다. 관련한 내용은 본문에
   "참고사항"으로 추가 해 놓겠습니다. 감사합니다. - 박응용, 2015년 1월 12일
   8:41 오전
   명령어 들을 이렇게 쉽고 간결하게 설명해 주셔서 깜짝 놀랐습니다. 저는 웹상
   에서 모니터로 보면 눈이 피로하고 불편해서...책으로 나와도 사서 볼 것 같습
   니다.^^ - park , 2015년 4월 8일 12:29 오전
   all[] 이 참으로 나오네요. 분명 [] = False 인데 말이죠. print(all([ ])) if
   []: print("true") else: print("false") 이렇게 해보면 위에 all([])은 True
   가 나오고 아래 if문은 false로 나오네요. 좀더 찾아봐야겠습니다~ㅎㅎ ※ 덕분
   에 파이썬 재미있게 공부하고 있네요^^ - Travis, 2016년 4월 5일 3:00 오후
   divmod(1.3, 0,2)의 출력은 왜 (6.0, 0.1)이 아니라 (6.0, 0.099999999999978)
   인지 궁금합니다. - Hyunsu, 2016년 7월 21일 2:39 오후
   @Hyunsu님, 이런 문제를 부동소수점 반올림 오차(rounding error)라고 하는데
   요, 수학적으로 실수는 무한히 많은데 이 실수를 유한 개의 비트로 표현하기 위
   해서는 근삿값으로 표현해야 하기 때문이라네요.. 자세한 내용은 다음 URL을 참
   고해 주시기 바랍니다.
   [94]https://docs.python.org/3.5/tutorial/floatingpoint.html - 박응용, 2016
   년 7월 22일 4:27 오후
   이런 함수들이나 모듈들 관련해서는 영어 단어 외우듯이 다 외워버리고 시작하
   는게 좋을까요 아니면 자연스럽게 필요할때마다 하나씩 찾아보면서 익히는것이
   나을까요? - 철환, 2016년 9월 6일 11:53 오전
   java 와 비교해보면 정말 간단하기는 하네요! - JoonHo, 2017년 1월 10일 12:15
   오후
   >>> str('hi'.upper()).lower() 'hi' String type의 내장함수를 연속으로 사용
   한 예 >>> list(zip([1, 2, 3], [4, 5, 6, 7])) [(1, 4), (2, 5), (3, 6)] list
   의 갯수가 다르니 같은 짝을 이룰 수 있는 3개만 출력하네요. - Gyoungtae,
   2017년 1월 27일 9:07 오후
   함수 내에서 내장함수 del()을 쓰려면 어떻게 해야하나요? 예를들어, def
   delete_and_print(x): print(x) del(x) return a = 3 delete_and_print(a) 이렇
   게 짠다고해도 a가 delete 되지 않고 함수 내의 지역변수 x만 delete 되네요.
   del()을 함수 안에 써서 a를 지우고 싶은데 어떻게 해야하나요? - 동욱, 2017년
   3월 22일 1:25 오전
   '있 으면' 이 부분에 오타가 있습니다.(all 함수 설명에 있는 오타입니다.) -
   남민우, 2018년 9월 15일 10:58 오전
   @남민우님, 수정했습니다. 감사합니다. - 박응용, 2018년 9월 18일 9:20 오전
   zip(iterable*) 이런곳에 *는 무엇을 의미하는 건가요? 어떤 키워드로 검색해보
   면 될까요? 감사합니다!! - Minkyung, 2018년 10월 3일 11:09 오전
   @Minkyung님, 본문에 질문하신 내용부분을 보강설명하였습니다. 알려주셔서 감
   사합니다. - 박응용, 2018년 10월 4일 10:09 오전
   우와 빠르게 답글 남겨주셔서 감사합니다!! 그럼 "*"은 "여러개"를 뜻하는 것인
   가 보네요!! - Minkyung, 2018년 10월 4일 10:26 오전
   all() 함수에 대한 질문이 있습니다. "※ 반복 가능한 자료형이란 for문으로 그
   값을 출력할 수 있는 것을 의미한다. 리스트, 튜플, 문자열, 딕셔너리, 집합 등
   이 있다." 라는 설명을 보고 아래와 같이 코드를 입력하였습니다. all("") 제
   생각에 문자열 ""은 false 이므로, 위 코드의 결과값은 false가 나와야 할 것
   같은데 true라고 나옵니다. 그 이유를 알 수 있을까요? - SG, 2018년 12월 20일
   10:10 오전
   @SG님 all의 입력이 되는 반복가능한 자료형이 비어 있을경우 all은 True를 any
   는 False를 리턴합니다. 내용은 본문에 추가하도록 하겠습니다. 알려주셔서 감
   사합니다. - 박응용, 2018년 12월 20일 9:27 오후
   정말 잘 읽고 있습니다. 어느덧 5-5까지 따라왔네요. 질문이 있습니다. 제가 통
   계학과라 이전에 주로 사용하던 프로그램은 R인데, R같은 경우에는 함수에 따라
   서 어떻게 작성되어있는지 알 수 있는 경우가 있거든요. 예를 들어서 함수이름
   을 콘솔에다 입력시키면 x <- ..., y <- .... 이런 식으로 어떻게 작성되어있는
   지 알 수 있는 경우가 있습니다. mean 같은 함수를 치면 S4를 이용했다면서 자
   세하게 나오지는 않지만요. 이 단원에서 hex라는 함수를 보고, 어떻게 짰을까
   궁금해서 R에서처럼 입력시켜보니깐 <function hex(number, /)> 가 얻을 수 있
   는 전부네요. 어떻게 코드를 작성했는지 알 수 있는 방법은 없을까요? 앞으로
   아이디어를 얻거나 어떻게 돌아가는지를 파악할 때 유용할 것 같은데요. 항상
   잘 읽고 있습니다. 감사합니다. - 윤현필(학부/상경대학 응용통계학과), 2018년
   12월 27일 11:03 오전
   @윤현필님, hex 같은 경우는 파이썬으로 작성된 모듈이 아닌 내장함수 입니다.
   파이썬으로 작성된 모듈은 파이썬이 설치된 디렉터리에서 확인할 수 있지만 내
   장함수 같은 경우는 c로 작성되어진 파이썬 소스코드를 참고하셔야 합니다. 다
   음 스택오버플로우 문서를 참조하시기 바랍니다.
   [95]https://stackoverflow.com/questions/8608587/finding-the-source-code-for-built-in-python-functions
   - 박응용, 2018년 12월 30일 7:17 오후
   map함수 부분에 오타가 있는데 iterable이 아니라 reiterable입니다. - Ju,
   2019년 1월 10일 2:23 오후
   [96]※ 댓글 작성은 로그인이 필요합니다. [97](또는 피드백을 이용해 주세요.)

     • 이전글 : [98]05-4 예외 처리
     • 다음글 : [99]05-6 외장 함수

   [100]TOP
   [101]×

  이 페이지에 대한 피드백을 남겨주세요

   답장받을 이메일 주소
   [102]_____________________
   하고 싶은 말
   [103]
   _____________________
   _____________________
   _____________________
   _____________________
   _____________________

   ※ 피드백은 저자에게 e-메일로 전달됩니다.

   [104]Close [105]전송하기

References

   Visible links
   1. https://wikidocs.net/book/1
   2. https://wikidocs.net/
   5. https://wikidocs.net/book/1
   6. javascript:page(2)
   7. javascript:page(4319)
   8. javascript:page(4320)
   9. javascript:page(742)
  10. javascript:page(4321)
  11. javascript:page(5)
  12. javascript:page(4307)
  13. javascript:page(6)
  14. javascript:page(7)
  15. javascript:page(8)
  16. javascript:page(9)
  17. javascript:page(17684)
  18. javascript:page(11)
  19. javascript:page(12)
  20. javascript:page(13)
  21. javascript:page(14)
  22. javascript:page(15)
  23. javascript:page(16)
  24. javascript:page(1015)
  25. javascript:page(17)
  26. javascript:page(18)
  27. javascript:page(42526)
  28. javascript:page(19)
  29. javascript:page(20)
  30. javascript:page(21)
  31. javascript:page(22)
  32. javascript:page(42527)
  33. javascript:page(23)
  34. javascript:page(24)
  35. javascript:page(25)
  36. javascript:page(26)
  37. javascript:page(42528)
  38. javascript:page(27)
  39. javascript:page(28)
  40. javascript:page(29)
  41. javascript:page(1418)
  42. javascript:page(30)
  43. javascript:page(32)
  44. javascript:page(33)
  45. javascript:page(42529)
  46. javascript:page(34)
  47. javascript:page(35)
  48. javascript:page(40)
  49. javascript:page(38)
  50. javascript:page(36)
  51. javascript:page(37)
  52. javascript:page(39)
  53. javascript:page(744)
  54. javascript:page(1669)
  55. javascript:page(1642)
  56. javascript:page(4308)
  57. javascript:page(4309)
  58. javascript:page(17114)
  59. javascript:page(12769)
  61. https://wikidocs.net/32#abs
  62. https://wikidocs.net/32#all
  63. https://wikidocs.net/32#any
  64. https://wikidocs.net/32#chr
  65. https://wikidocs.net/32#dir
  66. https://wikidocs.net/32#divmod
  67. https://wikidocs.net/32#enumerate
  68. https://wikidocs.net/32#eval
  69. https://wikidocs.net/32#filter
  70. https://wikidocs.net/32#hex
  71. https://wikidocs.net/32#id
  72. https://wikidocs.net/32#input
  73. https://wikidocs.net/32#int
  74. https://wikidocs.net/32#isinstance
  75. https://wikidocs.net/32#len
  76. https://wikidocs.net/32#list
  77. https://wikidocs.net/32#map
  78. https://wikidocs.net/32#max
  79. https://wikidocs.net/32#min
  80. https://wikidocs.net/32#oct
  81. https://wikidocs.net/32#open
  82. https://wikidocs.net/32#ord
  83. https://wikidocs.net/32#pow
  84. https://wikidocs.net/32#range
  85. https://wikidocs.net/32#round
  86. https://wikidocs.net/32#sorted
  87. https://wikidocs.net/32#str
  88. https://wikidocs.net/32#sum
  89. https://wikidocs.net/32#tuple
  90. https://wikidocs.net/32#type
  91. https://wikidocs.net/32#zip
  92. javascript:show_comments();
  93. 피드백을 남겨주세요
	https://wikidocs.net/32#myModal
  94. https://docs.python.org/3.5/tutorial/floatingpoint.html
  95. https://stackoverflow.com/questions/8608587/finding-the-source-code-for-built-in-python-functions
  96. https://wikidocs.net/loginForm
  97. https://wikidocs.net/32#myModal
  98. javascript:page(30)
  99. javascript:page(33)
 100. https://wikidocs.net/32#top
